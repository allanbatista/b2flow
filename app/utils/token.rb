##
# Token is a abstraction to generate a persistent string encrypted with data to share outside application safely.
# That only application can read from that encrypted token.
module Token
  ##
  # Can encode a hash object to a token
  #
  # Hash payload: data that will make a encrypted
  # Time expire: represents when token will expire
  # String return: token encrypted
  #
  # @example
  #
  # > Token.encode({name: "allan batista", age: 28}, Time.now + 1.day) # this generate a token with 1 day life
  # xxxxx
  def self.encode(payload, expire=Time.now + 1000.years)
    JWT.encode({payload: payload, exp: expire.to_i}, AppConfig.B2FLOW__TOKEN_SECRET, 'HS256')
  end

  ##
  # Decode decrypt token generated by encode
  #
  # String decode: token that will decode
  # Hash return: data decrypted
  #
  # @example
  #
  # > Token.decode("xxxxx")
  # {"name" => "allan batista", "age" => 28}
  def self.decode(token)
    data, _config = JWT.decode token, AppConfig.B2FLOW__TOKEN_SECRET, true, { algorithm: 'HS256' }
    return data['payload']
  rescue JWT::ExpiredSignature => e
    nil
  end
end